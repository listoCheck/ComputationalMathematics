import math
import numpy as np
import matplotlib.pyplot as plt
from systems import run


def equation_1(x):
    return -1.38 * x ** 3 - 5.42 * x ** 2 + 2.57 * x + 10.95


def equation_2(x):
    return x ** 3 - 1.89 * x ** 2 - 2 * x + 1.76


def equation_3(x):
    return 2 * x ** 3 + 3.41 * x ** 2 - 23.74 * x + 2.95


def equation_4(x):
    return math.sin(x) + 6 * x ** 2


def derivative_1(x):
    return -4.14 * x ** 2 - 10.84 * x + 2.57


def derivative_2(x):
    return 3 * x ** 2 - 3.78 * x - 2


def derivative_3(x):
    return 6 * x ** 2 + 6.82 * x - 23.74


def derivative_4(x):
    return math.cos(x) + 12 * x


def second_derivative_1(x):
    return -8.28 * x - 10.84


def second_derivative_2(x):
    return 6 * x - 3.78


def second_derivative_3(x):
    return 12 * x + 6.82


def second_derivative_4(x):
    return -math.sin(x) + 12


def plot_function(f, a, b):
    x = np.linspace(a, b, 400)
    y = [f(xi) for xi in x]
    plt.plot(x, y, label='–§—É–Ω–∫—Ü–∏—è')
    plt.axhline(0, color='black', linewidth=0.5)
    plt.axvline(0, color='black', linewidth=0.5)
    plt.grid(True, linestyle='--', linewidth=0.5)
    plt.legend()
    plt.show()


def bisection_method(f, a, b, eps):
    if f(a) * f(b) > 0:
        print("–û—à–∏–±–∫–∞: –Ω–∞ –¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç –∫–æ—Ä–Ω—è –∏–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ.")
        return
    plot_function(f, a, b)
    n = 0
    while abs(b - a) > eps:
        x = (a + b) / 2
        if abs(f(x)) <= eps:
            break
        elif f(a) * f(x) < 0:
            b = x
        else:
            a = x
        n += 1
        print(n, x, f(x), abs(b - a))

    print(f"–ö–æ–Ω–µ—á–Ω—ã–π –∫–æ—Ä–µ–Ω—å: {x}")
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ—Ä–Ω–µ: {f(x)}")
    print(f"–ß–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {n}")
    print(f"–¥–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {b - a}")
    return


def newton_method(f, df, a, b, eps, ddf):
    if not (df(a) * ddf(a) > 0 and df(b) * ddf(b) > 0):
        print("–ú–µ—Ç–æ–¥ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è")
        return
    else:
        print("–ù–∞ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —É—Å–ª–æ–≤–∏—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
    if f(a) * ddf(a) > 0:
        x0 = a
    elif f(b) * ddf(b) > 0:
        x0 = b

    else:
        print("–û—à–∏–±–∫–∞: –Ω–∞ –¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç –∫–æ—Ä–Ω—è –∏–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ.")
        return
    print(x0)
    plot_function(f, a, b)
    n = 0

    while True:
        x = x0 - f(x0) / df(x0)
        print(
            f"–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å: {x}, –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ x: {f(x)}, –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ x: {df(x)}, –ß–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {n}")
        if abs(x - x0) <= eps or abs(f(x) / df(x)) <= eps or abs(f(x)) <= eps:
            print("sadasdsad")
            print((x - x0) <= eps)
            print(abs(f(x) / df(x)) <= eps)
            print(abs(f(x)) <= eps)
            break
        n += 1
        x0 = x

    print(f"–ö–æ–Ω–µ—á–Ω—ã–π –∫–æ—Ä–µ–Ω—å: {x}")
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ—Ä–Ω–µ: {f(x)}")
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –≤ –∫–æ—Ä–Ω–µ: {df(x)}")
    print(f"–ß–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {n}")
    return


def simple_iteration_method(f, df, a, b, eps, ddf):
    plot_function(f, a, b)
    k = 1
    if df((a + b) / 2) > 0:
        k = -1

    def dphi(x):
        return 1 + df(x) / (max(abs(df(a)), abs(df(b))) * k)

    def phi(x):
        return x + f(x) / (max(abs(df(a)), abs(df(b))) * k)

    if abs(dphi(a)) > 1 or abs(dphi(b)):
        print(
            "–¢–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ ùùã` –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–Ω–∏–º–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –µ–¥–∏–Ω–∏—Ü—ã, —Ç–æ –º–µ—Ç–æ–¥ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ 1, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å 0")
        if int(input()) == 0:
            print("–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞")
            return
        else:
            print("–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
    print(dphi(a), dphi(b))
    print(1 / (max(df(a), df(b)) * k))

    if f(a) * ddf(a) > 0:
        x0 = a
    elif f(b) * ddf(b) > 0:
        x0 = b
    else:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ.")
        return

    print(f"–ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: x0 = {x0}")

    n = 0
    while True:
        x1 = phi(x0)
        print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {n}: x0 = {x0}, x1 = {x1}, |x1 - x0| = {abs(x1 - x0)}")
        if abs(f(x1)) < eps:
            break
        x0 = x1
        n += 1

    print(f"–ö–æ–Ω–µ—á–Ω—ã–π –∫–æ—Ä–µ–Ω—å: {x1}")
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ—Ä–Ω–µ: {f(x1)}")
    print(f"–ß–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {n}")
    return


def get_input_from_file(filename):
    try:
        with open(filename, 'r') as file:
            data = file.readlines()
            return [float(value.strip()) for value in data]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None


def get_user_input():
    choice = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: ").strip()
    if choice:
        return get_input_from_file(choice)
    else:
        return [
            float(input("–í–≤–µ–¥–∏—Ç–µ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: ")),
            float(input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: ")),
            float(input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: "))
        ]


def main():
    while True:
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
        print("1: –ù–µ–ª–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        print("2: –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
        print("3: –í—ã—Ö–æ–¥")
        prog_type = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞: ")
        if prog_type == "3":
            break
        if prog_type == "2":
            run()
            continue
        print("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print("1: -1.38*x^3 - 5.42*x^2 + 2.57*x + 10.95")
        print("2: x^3 - 1.89*x^2 - 2*x + 1.76")
        print("3: 2*x^3 + 3.41*x^2 - 23.74*x + 2.95")
        print("4: sin(x) + 6x^2")
        eq_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–∞–≤–Ω–µ–Ω–∏—è: ")

        equations = {"1": equation_1, "2": equation_2, "3": equation_3, "4": equation_4}
        derivatives = {"1": derivative_1, "2": derivative_2, "3": derivative_3, "4": derivative_4}
        second_derivatives = {"1": second_derivative_1, "2": second_derivative_2, "3": second_derivative_3,
                              "4": second_derivative_4}
        f = equations.get(eq_choice)
        df = derivatives.get(eq_choice)
        ddf = second_derivatives.get(eq_choice)

        if not f:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —É—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            continue
        plot_function(f, -5, 5)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:")
        print("1: –ú–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è")
        print("2: –ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞")
        print("3: –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏")
        method_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Ç–æ–¥–∞: ")

        input_data = get_user_input()
        if not input_data:
            continue


        if method_choice == "1":
            bisection_method(f, input_data[0], input_data[1], input_data[2])
        elif method_choice == "2":
            newton_method(f, df, input_data[0], input_data[1], input_data[2], ddf)
        elif method_choice == "3":
            simple_iteration_method(f, df, input_data[0], input_data[1], input_data[2], ddf)
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞.")
            continue

        again = input("–ï—â–µ —Ä–∞–∑? [y/n]: ")
        if again.lower() != "y":
            break


main()
